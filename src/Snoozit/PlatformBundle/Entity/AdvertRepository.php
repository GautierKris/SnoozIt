<?php

namespace Snoozit\PlatformBundle\Entity;

use Doctrine\ORM\EntityNotFoundException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Snoozit\PlatformBundle\Entity\Localisation\Region;
use Snoozit\UserBundle\Entity\User;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends EntityRepository
{
    private function getByLocalisationQueryBuilder()
    {
        $qb = $this->createQueryBuilder('a');
        $qb->select(
            'a.title','a.urgent', 'a.sold', 'a.views','a.price','a.delivery','a.success', 'a.created', 'a.updated','a.id' ,
            'a.slug','a.description','a.espece','a.paypal','a.cheque cheque','a.negotiable negotiable',
            'b.category', 'b.slug category_slug' , 'q.parent parentCat',
            'c.nom city', 'c.slug city_slug','c.postal',
            'u.username', 'u.id userId', 's.id soldTo' ,'t.id inProgress',
            'g.username guestUsername',
            'f.nom regionName', 'f.slug regionSlug',
            'd.nom departementName',
            'p.path picture_path', 'v.path avatar'
        )
            ->leftJoin('a.category','b')
            ->leftJoin('a.city','c')
            ->leftJoin('c.departement', 'd')
            ->leftJoin('d.region', 'f')
            ->leftJoin('a.user','u')
            ->leftJoin('a.guest','g')
            ->leftJoin('a.soldTo','s')
            ->leftJoin('a.inProgress','t')
            ->leftJoin('a.pictureOne', 'p')
            ->leftJoin('u.avatar', 'v')
            ->leftJoin('b.parentcategory', 'q')
            ->orderBy('a.created' , 'DESC')
            ->where('a.sold = 0')
            ->setMaxResults(30);

        return $qb;
    }

    // Récupere une liste d'annonces en corélation avec l'annonces affichée
    public function getAdvertListToPropose(Advert $advert, $max = 6)
    {
        $qb = $this->getByLocalisationQueryBuilder();

        $qb->having('a.id != :advertId')
            ->where('a.slug = :advertSlug')
            ->orWhere('a.description = :advertDescription')
            ->orWhere('b.id = :advertCategory')
            ->orWhere('c.id = :advertCity')
            ->addOrderBy('a.created', 'desc')
            ->setMaxResults($max)
            ->setParameters(array(
                'advertId'          => $advert->getId(),
                'advertSlug'        => $advert->getSlug(),
                'advertCategory'    => $advert->getCategory(),
                'advertDescription' => $advert->getDescription(),
                'advertCity'        => $advert->getCity(),
            ));

        $result = $qb->getQuery()->getArrayResult();

        return $this->AdvertCollectionHydrated($result);
    }

    // Récupere une liste d'annonces en corélation avec l'annonces affichée
    public function getAdvertListToProposeForPanier(Advert $advert, $max = 3)
    {
        $qb = $this->getByLocalisationQueryBuilder();

        $qb->having('a.id != :advertId')
            ->where('a.slug = :advertSlug')
            ->orWhere('a.description = :advertDescription')
            ->orWhere('b.id = :advertCategory')
            ->orWhere('c.id = :advertCity')
            ->addOrderBy('a.created', 'desc')
            ->setMaxResults($max)
            ->setParameters(array(
                'advertId'          => $advert->getId(),
                'advertSlug'        => $advert->getSlug(),
                'advertCategory'    => $advert->getCategory(),
                'advertDescription' => $advert->getDescription(),
                'advertCity'        => $advert->getCity(),
            ));

        $result = $qb->getQuery()->getArrayResult();

        return $result;
    }

    // Recupere la liste des annonces sans filtres
    public function getLastAdverts($choices, $localisation)
    {
        $qb = $this->getByLocalisationQueryBuilder();

        if($choices){
            $this->queryFilters($choices, $qb);
        }
        if($localisation){
            $this->queryFilterAddByLocalisation($qb, $localisation['id']);
        }

        $result = $qb->getQuery()->getArrayResult();

        return $this->AdvertCollectionHydrated($result);
    }

    // Modifie les filtres pour plusieurs annonces
    private function AdvertCollectionHydrated($array)
    {
        $newArray = array();

        foreach ($array as $key => $row){
            $newArray[$key] = $this->rehydrateArray($row);
        }

        return $newArray;
    }

    // Modifie les filtres
    private function rehydrateArray($row)
    {
        if(!$row['username']){
            $username = $row['guestUsername'];
            $guest = true;
            $userId = false;
            $avatar = null;
        }else{
            $username = $row['username'];
            $guest  = false;
            $userId = $row['userId'];
            $avatar = $row['avatar'];
        }

        $result = array(
            'title'         => $row['title'],
            'price'         => $row['price'],
            'urgent'        => $row['urgent'],
            'success'       => $row['success'],
            'sold'          => $row['sold'],
            'soldTo'        => $row['soldTo'],
            'inProgress'    => $row['inProgress'],
            'parentCat'     => $row['parentCat'],
            'category'      => $row['category'],
            'delivery'      => $row['delivery'],
            'category_slug' => $row['category_slug'],
            'city'          => $row['city'],
            'city_slug'     => $row['city_slug'],
            'postal'        => $row['postal'],
            'created'       => $row['created'],
            'updated'       => $row['updated'],
            'id'            => $row['id'],
            'picture_path'  => $row['picture_path'],
            'slug'          => $row['slug'],
            'description'   => $row['description'],
            'user'          => array(
                'username'  => $username,
                'isGuest'   => $guest,
                'id'        => $userId,
                'avatar'    => $avatar,
                )
            );

        return $result;
    }

    // Recupere les annonces achetés par l'utilisateur
    public function getBought(User $user)
    {
        $qb = $this->getByLocalisationQueryBuilder();

        $qb->where('a.soldTo = :user')
            ->setParameter('user', $user);

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    // Recupere les annonces confirmées et vendues donc
    public function getConfirmed(User $user)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.sold = 1')
            ->andWhere('a.user = :user')
            ->setParameter('user', $user);

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    // Modifie les champs a afficher pour 1 annonce
    public function rehydrateAdvert(Advert $advert)
    {
        if(is_object($advert)){
            if(!$advert->getUser()){
                $username   = $advert->getGuest()->getUsername();
                $connected  = false;
                $isGuest    = true;
                $email      = $advert->getGuest()->getEmail();
                $phone      = $advert->getGuest()->getPhone();
                $userId     = $advert->getGuest()->getId();
                $avatar     = null;
                $note       = null;
            }else{
                $username  = $advert->getUser()->getUsername();
                $connected = $advert->getUser()->isOnline();
                $isGuest   = false;
                $email     = $advert->getUser()->getEmail();
                $phone     = $advert->getUser()->getPhone();
                $userId    = $advert->getUser()->getId();
                $avatar    = $advert->getUser()->getAvatar()->getPath();
                $note      = $advert->getUser()->getScore();
            }

            $comments = $advert->getComments();
            $resultComments = array();

            if($comments->toArray()){
                $i=0;
                foreach($comments->toArray() as $comment){
                    $resultComments[$i] = array(
                        'comment' => $comment->getComment(),
                        'created' => $comment->getCreated(),
                        'user'     => $comment->getUser()
                    );
                    $i++;
                }
            }


            $result = array(
                'title'             => $advert->getTitle(),
                'price'             => $advert->getPrice(),
                'urgent'            => $advert->getUrgent(),
                'sold'              => $advert->getSold(),
                'soldTo'            => $advert->getSoldTo(),
                'inProgress'        => $advert->getInProgress(),
                'negotiate'         => $advert->getNegotiable(),
                'paypal'            => $advert->getPaypal(),
                'cheque'            => $advert->getCheque(),
                'cb'                => $advert->getCb(),
                'espece'            => $advert->getEspece(),
                'success'           => $advert->getSuccess(),
                'category'          => $advert->getCategory()->getCategory(),
                'parentCat'         => $advert->getCategory()->getParentcategory()->getParent(),
                'delivery'          => $advert->getDelivery(),
                'category_slug'     => $advert->getCategory()->getSlug(),
                'city'              => $advert->getCity()->getNom(),
                'city_slug'         => $advert->getCity()->getSlug(),
                'postal'            => $advert->getCity()->getPostal(),
                'created'           => $advert->getCreated(),
                'updated'           => $advert->getUpdated(),
                'id'                => $advert->getId(),
                'slug'              => $advert->getSlug(),
                'description'       => $advert->getDescription(),
                'pictures'          => $advert->getPictures()->toArray(),
                'user'      => array(
                    'username'  => $username,
                    'email'     => $email,
                    'phone'     => $phone,
                    'connected' => $connected,
                    'isGuest'   => $isGuest,
                    'userId'    => $userId,
                    'avatar'    => $avatar,
                    'score'     => $note,
                ),
                'comments'      => $resultComments
            );

            return $result;
        }

        throw new EntityNotFoundException("La variable transmise n'est pas un objet, il doit y avoir une erreur..");
    }

    public function getByRegion($region, $choices)
    {
        $qb = $this->getByLocalisationQueryBuilder();
        $qb->andWhere('d.region = :region')->setParameter('region', $region);

        if($choices){
            $this->queryFilters($choices, $qb);
        }

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function getByDepartement($departement, $choices)
    {
        $qb = $this->getByLocalisationQueryBuilder();
        $qb->andWhere('c.departement = :departement')->setParameter('departement', $departement);

        if($choices){
            $this->queryFilters($choices, $qb);
        }

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function getByCity($city, $choices)
    {
        $qb = $this->getByLocalisationQueryBuilder();
        $qb->andWhere('a.city = :city')->setParameter('city', $city);
        ;

        if($choices){
            $this->queryFilters($choices, $qb);
        }

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function getByCategory($category, $choices, $localisation)
    {
        $qb = $this->getByLocalisationQueryBuilder();
        $qb->andWhere('a.category = :category')->setParameter('category', $category);

        if($choices){
            $this->queryFilters($choices, $qb);
        }
        if($localisation){
            $this->queryFilterAddByLocalisation($qb, $localisation['id']);
        }

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    private function queryFilters($choices, QueryBuilder $qb)
    {
        if($choices) {
            foreach ($choices as $key => $value) {
                // Uniquement les membres
                if ($value == 1) {
                    $qb->andWhere('a.user IS NOT NULL');
                }
                // Avce image
                if ($value == 2) {
                    $qb->andWhere('p.path IS NOT NULL');
                }
                // Sans Image
                if ($value == 3) {
                    $qb->andWhere('p.path IS NULL');
                }
            }
            return $qb;
        }
        return null;
    }

    public function getMediaToPropose()
    {
        $qb = $this->createQueryBuilder('a');

            $qb->select('b.path', 'a.id','a.slug','a.price')
                ->leftJoin('a.pictureOne', 'b')
                ->where('b.path IS NOT NULL')
                ->setMaxResults(12)
            ;

            $result = $qb->getQuery()->getArrayResult();

       return $result;
    }

    private function queryFilterAddByLocalisation(QueryBuilder $qb, $localisationId)
    {
        // Localise les annonces par région
        $query = $qb->andWhere('f.id = :localisationId')
                    ->setParameter('localisationId', $localisationId);

        return $query;
    }

    // Utiliser par le SearchEngine
    public function getAdvertForSearchEngine($parameters, $choices,  $localisation)
    {
        $search = $parameters['slug'];
        $region = $parameters['region'];
        $category = $parameters['category'];


        $qb = $this->getByLocalisationQueryBuilder();

        $qb->where('a.title like :search')
            ->orWhere('u.username like :search')
            ->setParameter('search', '%'.$search.'%');

        if($region){
            $region_entity = $this->_em->getRepository('SnoozitPlatformBundle:Localisation\Region')->findOneBy(array('slug' => $region));

            if($region_entity){
                $qb->andWhere('d.region = :regionId')
                    ->setParameter('regionId', $region_entity->getId());
            }
        }

        if($category){
            $category_entity = $this->_em->getRepository('SnoozitPlatformBundle:Categories\Category')->findOneBy(array('slug' => $category));

            if($category_entity){
                $qb->andWhere('a.category = :categoryId')
                    ->setParameter('categoryId', $category_entity->getId());
            }
        }

        if($choices){
            $this->queryFilters($choices, $qb);
        }
        if($localisation){
            $this->queryFilterAddByLocalisation($qb, $localisation['id']);
        }

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function getAdvertListForUser($followedList, $user, $hiddenUsersIds)
    {
        $qb = $this->getByLocalisationQueryBuilder();
                $qb->where('a.id IN (:followedList)')
                    ->orWhere('a.user = :user')
                    ->andWhere('a.sold = 0')
                ->orderBy('a.created', 'DESC');

        if(!empty($hiddenUsersIds)){
            $qb->andWhere('u.id NOT IN (:hiddenUsersIds)')
                ->setParameter('hiddenUsersIds' , $hiddenUsersIds);

        }
                $qb->setParameter('followedList' , $followedList)
                    ->setParameter('user' , $user);

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function getUserAdvertList(User $user)
    {
        $qb = $this->getByLocalisationQueryBuilder();
        $qb->where('a.user = :user')
            ->orderBy('a.id', 'DESC')
            ->setParameters(array('user' => $user));

        $result = $qb->getQuery()->getResult();

        return $result;
    }

    public function countTotalView(User $user)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->select('a.views')
            ->where('a.user = :user')
            ->setParameter('user', $user)
        ;

        $result = $qb->getQuery()->getResult();

        $total = 0;
        foreach($result as $row)
        {
            $total += $row['views'];
        }

        return $total;
    }

    public function countPercentageView(User $user)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->select('COUNT(a)')
            ->where('a.views != 0')
            ->andWhere('a.user = :user')
            ->setParameter('user', $user)
        ;

        $result = $qb->getQuery()->getSingleScalarResult();

        return $result;
    }

    // Utiliser pour l'affichage des annonces en fonction des FOLLOW
    public function getAdvertByRegionFollowed(array $regions)
    {
        $qb = $this->getByLocalisationQueryBuilder();

        $qb->where('f.id IN (:regions)')
            ->setParameter('regions' , $regions);

        return $qb->getQuery()->getResult();
    }

    public function getAdvertByDepartementFollowed(array $departements)
    {
        $qb = $this->getByLocalisationQueryBuilder();

        $qb->where('d.id IN (:departements)')
            ->setParameter('departements' , $departements);

        return $qb->getQuery()->getResult();
    }

    public function getAdvertByCityFollowed(array $citys)
    {
        $qb = $this->getByLocalisationQueryBuilder();

        $qb->where('c.id IN (:citys)')
            ->setParameter('citys', $citys);

        return $qb->getQuery()->getResult();
    }

    public function getAdvertByCategoriesFollowed(array $categories)
    {
        $qb = $this->getByLocalisationQueryBuilder();

        $qb->where('b.id IN (:categories)')
            ->setParameter('categories', $categories);

        return $qb->getQuery()->getResult();
    }

    public function getAdvertByUsersFollowed(array $users)
    {
        $qb = $this->getByLocalisationQueryBuilder();

        $qb->where('u.id IN (:users)')
            ->setParameter('users' , $users);

        return $qb->getQuery()->getResult();
    }

    // Renvoi les annonces vendu pour un utilisateur
    public function getAdvertInSoldSuccess($user)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->select('a')
            ->where('a.user = :user')
            ->andWhere('a.sold = true')
            ->setParameters(array('user' => $user));

        $result = $qb->getQuery()->getResult();

        return $result;
    }

}
